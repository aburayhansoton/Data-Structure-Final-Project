#include <stdio.h>
#include <stdlib.h>
#define ERROR 1e8
typedef int ElementType;
typedef enum { push, pop, end } Operation;

typedef struct StackRecord *Stack;
struct StackRecord  {
    int Capacity;       /* maximum size of the stack array */
    int Top1;           /* top pointer for Stack 1 */
    int Top2;           /* top pointer for Stack 2 */
    ElementType *Array; /* space for the two stacks */
};

Stack CreateStack( int MaxElements );
int IsEmpty( Stack S, int Stacknum );
int IsFull( Stack S );
int Push( ElementType X, Stack S, int Stacknum );
ElementType Top_Pop( Stack S, int Stacknum );

//Operation GetOp();  /* details omitted */
void PrintStack( Stack S, int Stacknum ); /* details omitted */

int main()
{
    int N, Sn, X;
    Stack S;
    int done = 0;

    scanf("%d", &N);
    S = CreateStack(N);
    while ( !done ) {
        switch( GetOp() ) {
        case push:
            scanf("%d %d", &Sn, &X);
            if (!Push(X, S, Sn)) printf("Stack %d is Full!\n", Sn);
            break;
        case pop:
            scanf("%d", &Sn);
            X = Top_Pop(S, Sn);
            if ( X==ERROR ) printf("Stack %d is Empty!\n", Sn);
            break;

        case end:
            PrintStack(S, 1);
            PrintStack(S, 2);
            done = 1;
            break;
        }
    }
    system("pause");
    return 0;
}

int GetOp(){
    char s[20];
    scanf("%s",s);
    if (0 == strcmp(s,"Push")){
        return push;
    }else if (0 == strcmp(s,"Pop")){
        return pop;
    }else if (0 == strcmp(s,"End")){
        return end;
    }
}

void PrintStack( Stack S, int Stacknum ){
    printf("\nPop from Stack %d: ",Stacknum);
    while (!IsEmpty(S,Stacknum)){
        printf("%d ",Top_Pop(S,Stacknum));
    }
}

/* Your function will be put here */
Stack CreateStack( int MaxElements ){
    Stack retVal = (Stack)malloc(sizeof(Stack));
    retVal->Capacity = MaxElements;
    retVal->Array = (ElementType)malloc(sizeof(ElementType) * MaxElements);
    retVal->Top1 = -1;
    retVal->Top2 = MaxElements;
    return retVal;
}
int IsEmpty( Stack S, int Stacknum ){
    switch (Stacknum){
        case 1:
            return S->Top1 <= -1;
        case 2:
            return S->Top2 >= S->Capacity;
    }
}

int IsFull( Stack S ){
    return (S->Top1 + 1) >= S->Top2;
}

int Push( ElementType X, Stack S, int Stacknum ){
    if (IsFull(S)){
        return 0;
    }
    switch(Stacknum){
        case 1:
            S->Array[++(S->Top1)] = X;
            break;
        case 2:
            S->Array[--(S->Top2)] = X;
            break;
    }
    return 1;
}

ElementType Top_Pop( Stack S, int Stacknum ){
    if (IsEmpty(S,Stacknum)){
        return ERROR;
    }
    switch(Stacknum){
        case 1:
            return S->Array[S->Top1--];
        case 2:
            return S->Array[S->Top2++];
    }
}